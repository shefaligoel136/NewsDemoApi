# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!


service: newsproject
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  environment:
    tableName: ${self:custom.tableName}
    userTableName: ${self:custom.userTableName}
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - sns:*
        - ses:*
      Resource: "*"

plugins:
  - serverless-webpack

package:
  individually: true

custom:
  tableName: newsDemoAPI
  userTableName: userDemoAPI



# you can overwrite defaults here

#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getAllNews:
    handler: lambdas/endpoints/getAllNews.handler
    events:
      - http:
          path: get-allNews/{ID}
          method: GET
          cors: true

  getNewsByID:
    handler: lambdas/endpoints/getNewsByID.handler
    events:
      - http:
          path: get-newsBy-ID/{ID}
          method: GET
          cors: true

  deleteNewsByID:
    handler: lambdas/endpoints/deleteNewsByID.handler
    events:
      - http:
          path: delete-newsBy-ID/{ID}
          method: DELETE
          cors: true

  createNews:
    handler: lambdas/endpoints/createNews.handler
    events:
      - http:
          path: createNews
          method: POST
          cors: true

  getNewsByCity:
    handler: lambdas/endpoints/getNewsByCity.handler
    events:
      - http:
          path: get-newsBy-City/{city}
          method: GET
          cors: true

  getNewsByState:
    handler: lambdas/endpoints/getNewsByState.handler
    events:
      - http:
          path: get-newsBy-State/{state}
          method: GET
          cors: true

  getNewsByAuthor:
    handler: lambdas/endpoints/getNewsByAuthor.handler
    events:
      - http:
          path: get-newsBy-Author/{author}
          method: GET
          cors: true

  getNewsByCityHighlight:
    handler: lambdas/endpoints/getNewsByCityHighlight.handler
    events:
      - http:
          path: get-newsBy-CityHighlight/{city}
          method: GET
          cors: true

  getNewsByStateHighlight:
    handler: lambdas/endpoints/getNewsByStateHighlight.handler
    events:
      - http:
          path: get-newsBy-StateHighlight/{state}
          method: GET
          cors: true

  getNewsByAuthorHighlight:
    handler: lambdas/endpoints/getNewsByAuthorHighlight.handler
    events:
      - http:
          path: get-newsBy-AuthorHighlight/{author}
          method: GET
          cors: true

  getCityTypeNews:
    handler: lambdas/endpoints/getCityTypeNews.handler
    events:
      - http:
          path: get-newsBy-CityTypeNews/{city}/{typeNews}
          method: GET
          cors: true

  getStateTypeNews:
    handler: lambdas/endpoints/getStateTypeNews.handler
    events:
      - http:
          path: get-newsBy-StateTypeNews/{state}/{typeNews}
          method: GET
          cors: true

  getAuthorTypeNews:
    handler: lambdas/endpoints/getAuthorTypeNews.handler
    events:
      - http:
          path: get-newsBy-AuthorTypeNews/{author}/{typeNews}
          method: GET
          cors: true

  updateTitle:
    handler: lambdas/endpoints/updateTitle.handler
    events:
      - http:
          path: updateTitle/{ID}
          method: PUT
          cors: true

  updateDescription:
    handler: lambdas/endpoints/updateDescription.handler
    events:
      - http:
          path: updateDescription/{ID}
          method: PUT
          cors: true

  updateHighlights:
    handler: lambdas/endpoints/updateHighlights.handler
    events:
      - http:
          path: updateHighlights/{ID}
          method: PUT
          cors: true

  createUsers:
    handler: lambdas/endpoints/createUsers.handler
    events:
      - http:
          path: createUsers
          method: POST
          cors: true

  preSignUp:
    handler: lambdas/endpoints/auth-lambda-triggers/pre-sign-up.handler
    events:
      - cognitoUserPool:
          pool: NewsUsersPool
          trigger: PreSignUp

  defineAuthChallenge:
    handler: lambdas/endpoints/auth-lambda-triggers/define-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: NewsUsersPool
          trigger: DefineAuthChallenge

  createAuthChallenge:
    handler: lambdas/endpoints/auth-lambda-triggers/create-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: NewsUsersPool
          trigger: CreateAuthChallenge

  verifyAuthChallengeResponse:
    handler: lambdas/endpoints/auth-lambda-triggers/verify-auth-challenge-response.handler
    events:
      - cognitoUserPool:
          pool: NewsUsersPool
          trigger: VerifyAuthChallengeResponse


resources: # CloudFormation template syntax from here on.
  Resources:
    newsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: author
            AttributeType: S
          - AttributeName: city
            AttributeType: S
          # - AttributeName: description
          #   AttributeType: S
          # - AttributeName: highlight
          #   AttributeType: N
          - AttributeName: newsID
            AttributeType: S
          - AttributeName: state
            AttributeType: S
          # - AttributeName: timeStamp
          #   AttributeType: N
          # - AttributeName: title
          #   AttributeType: S
          # - AttributeName: totalShare
          #   AttributeType: N
          - AttributeName: typeNews
            AttributeType: S
          # - AttributeName: reportReason
          #   AttributeType: M
        KeySchema:
          - AttributeName: newsID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: author-typeNews-index
            KeySchema:
              - AttributeName: author
                KeyType: HASH
              - AttributeName: typeNews
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          # GlobalSecondaryIndexes:
          - IndexName: city-typeNews-index
            KeySchema:
              - AttributeName: city
                KeyType: HASH
              - AttributeName: typeNews
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          # GlobalSecondaryIndexes:
          - IndexName: state-typeNews-index
            KeySchema:
              - AttributeName: state
                KeyType: HASH
              - AttributeName: typeNews
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S
          - AttributeName: city
            AttributeType: S
        KeySchema:
          - AttributeName: userID
            KeyType: HASH
          - AttributeName: city
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: cognito_sls_backend_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"

    CognitoUserPoolNewsUsersPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:provider.stage}-news-users-pool
        # Set phone_number as an alias
        UsernameAttributes:
          - phone_number
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False

    CognitoUserPoolClientNewsUsersPool:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-news-users-pool-client
        UserPoolId:
          Ref: CognitoUserPoolNewsUsersPool
        ExplicitAuthFlows:
          - CUSTOM_AUTH_FLOW_ONLY
        GenerateSecret: false
    

    



#serverless deploy --aws-profile custom-profile
